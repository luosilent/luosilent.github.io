[{"title":"爬虫的理论知识储备","date":"2017-08-18T15:23:09.000Z","path":"2017/08/18/爬虫的理论知识储备/","text":"网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。 爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。 1.浏览网页的过程 浏览网页的过程其实就是浏览器作为一个浏览的“客户端”，向服务器端发送了 一次请求，把服务器端的文件“抓”到本地，再进行解释、展现。 使用统一资源定位符URL来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。通过超文本传送协议HTTP来实现万维网上各种连接，使用TCP连接进行可靠的传送。使用超文本标记语言HTML使得网页设计者可以很方便地用链接从本页面的某处链接到任意网页，并在自己主机屏幕上显示。 2.统一资源定位符URL URL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的指针。由于访问不同对象使用的协议不同，URL还能之处读取某个对象时所使用的协议。URL的一般形式为： &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 协议是指用哪种协议获取该万维网文档，如http，ftp；主机是指该网络文档所在主机的域名；端口和路径有时可以省略。对万维网的网点访问使用HTTP协议，HTTP的默认端口号是80，通常可省略。若在省略文件的路径，则URL就指到因特网上的某个主页。如： www.baidu.com。 3.超文本传送协议HTTP HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。下图给出了万维网的大致工作过程。 HTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码穿构成的请求和一个“MIME-like”的响应组成，HTTP报文通常都使用TCP连接传送。 HTTP有两类报文：请求报文（从客户向服务器发送请求报文）和响应报文（从服务器到客户的回答）。HTTP请求报文和响应报文都是由三部分组成，两种报文格式的区别就是开始行不同。 开始行 用于区分是请求报文还是响应报文。开始行在两种报文中分别叫请求行和状态行。 首部行 用来说明浏览器或报文主题的一些信息。 实体主体 在请求报文中一般不用该字段，而在响应报文中也可能没有该字段。 请求行只有三个内容，即方法、请求资源URL和HTTP的版本。下表给出了请求报文中常用的几种方法。 方法 意义 GET 请求读取URL标志的信息 OPTION 请求一些选项的信息 HEAD 请求读取URL标志信息的首部 POST 给服务器添加信息，如注释 PUT 在致命的URL下存储一个文档 DELETE 删除致命的URL所标志的资源 CONNECT 用于代理服务器 GET http://www.bilibili.com/video/douga.html HTTP/1.1 下面是一个请求报文的例子 4。超文本标记语言HTML HTML指的是超文本标记语言，是使用标记标签来描述网页的。 HTML标签是由尖括号包围的关键词，比如&lt;html&gt;。HTML标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个是结束标签，比如&lt;b&gt;和&lt;/b&gt;。 HTML文档包含HTML标签和纯文本，也称为网页。Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。 五个基本的标签 &lt;h1&gt; - &lt;h6&gt;等：定义HTML 标题。 &lt;p&gt;：定义HTML 段落。 &lt;a&gt;：定义HTML 链接。 &lt;img&gt;：定义HTML 图像。 &lt;div&gt; :HTML分组标签，定义文档中的分区或节。 &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;h2&gt;This is a heading&lt;/h2&gt; &lt;h3&gt;This is a heading&lt;/h3&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;p&gt;This is another paragraph.&lt;/p&gt; &lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt; &lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt; HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。元素的内容是开始标签与结束标签之间的内容。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素），HTML 文档由嵌套的 HTML 元素构成。如下例包含3个HTML元素。 &lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; HTML 属性：HTML 标签可以拥有属性，属性提供了有关 HTML 元素的更多的信息，属性总是以名称/值对的形式出现，比如：name=”value”，属性总是在 HTML 元素的开始标签中规定；属性值应该始终被包括在引号内，双引号是最常用的，不过使用单引号也没有问题。 HTML链接由&lt;a&gt;标签定义，链接的地址在 href 属性中指定： &lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;a&gt; 转载于作者：Mr希灵 链接：http://www.jianshu.com/p/0cec67708277","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/爬虫/"}]},{"title":"每天读点文学2","date":"2017-08-17T12:12:14.000Z","path":"2017/08/17/每天读点文学/","text":"文摘 我喜欢回顾，是因为我不喜欢忘记。我总认为，在世间，有些人、有些事、有些时刻似乎都有一种特定的安排，在当时也许不觉得，但是在以后回想起来，却都有一种深意。我有过许多美丽的时刻，实在舍不得将它们忘记。 ——席慕容《透明的哀伤》","tags":[{"name":"读书","slug":"读书","permalink":"http://yoursite.com/tags/读书/"},{"name":"文摘","slug":"文摘","permalink":"http://yoursite.com/tags/文摘/"}]},{"title":"Python 技巧总结","date":"2017-08-17T06:43:01.000Z","path":"2017/08/17/Python-技巧总结/","text":"1.枚举 - enumerate 可以有参数哦 之前我们这样操作： i = 0 for item in iterable: print i, item i += 1 现在我们这样操作： for i, item in enumerate(iterable): print i, item enumerate函数还可以接收第二个参数。就像下面这样： &gt;&gt;&gt;list(enumerate(&apos;abc&apos;)) [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] &gt;&gt;&gt; list(enumerate(&apos;abc&apos;, 1)) [(1, &apos;a&apos;), (2, &apos;b&apos;), (3, &apos;c&apos;)] 2.字典/集合 解析 你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子： my_dict = {i: i * i for i in xrange(100)} my_set = {i * 15 for i in xrange(100)} # There is only a difference of &apos;:&apos; in both # 两者的区别在于字典推导中有冒号 3.强制浮点除法 from __future__ import division result = 1/2 # print(result) # 0.5 4.对Python表达式求值 我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作： import ast my_list = ast.literal_eval(expr) 来代替以下这种操作： expr = &quot;[1, 2, 3]&quot; my_list = eval(expr) 我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。 5.字符串/数列 逆序 你可以用以下方法快速逆序排列数列： &gt;&gt;&gt; a = [1,2,3,4] &gt;&gt;&gt; a[::-1] [4, 3, 2, 1] # This creates a new reversed list. # If you want to reverse a list in place you can do: a.reverse() 这总方式也同样适用于字符串的逆序： &gt;&gt;&gt; foo = &quot;yasoob&quot; &gt;&gt;&gt; foo[::-1] &apos;boosay&apos; 6.三元运算 三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。 [on_true] if [expression] else [on_false] x, y = 50, 25 small = x if x &lt; y else y 7.Python里面如何拷贝一个对象 标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象. import copy new_list = copy.copy(existing_list) 有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法: import copy new_list_of_dicts = copy.deepcopy(existing_list_of_dicts) copy(x) Shallow copy operation on arbitrary Python objects. deepcopy(x, memo=None, _nil=[]) Deep copy operation on arbitrary Python objects. 8.python中如何判断对象相等 首先是C#中字符串的==和equal方法。 “==” : 对于内置值类型而言， == 判断两个内存值是否相等。 对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。 对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。 “equals” : 对于值类型而言， 内存相等才返回true。 对于引用类型而言，指向同一个引用才算相等。 但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。 python中的 == python中的对象包含三要素:id, type, value id 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。 is 判断是否是一个对象，使用id来判断的。 == 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。 9.命名技巧 今天阅读代码，发现一个不错的函数命名方式: def request(_argv): 就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。 10.开发者工具集锦 pydoc： 模块可以根据源代码中的docstrings为任何可导入模块生成格式良好的文档。 doctest模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。 unittest模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。 trace：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。 pdb：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。profile, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。 compileall: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。YAPF：Google开源的Python代码格式化工具。 iPDB: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。 pycallgraph: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。 objgraph: objgraph对于查找内存泄露非常有用。 转载原文by litaotao https://litaotao.github.io/python-materials","tags":[{"name":"python笔记","slug":"python笔记","permalink":"http://yoursite.com/tags/python笔记/"}]},{"title":"每天读点文学1","date":"2017-08-16T15:12:14.000Z","path":"2017/08/16/first/","text":"文摘 不要着急，最好的总会在最不经意的时候出现。那我们要做的就是：怀揣希望去努力，静待美好的出现。————泰戈尔 ​​​​","tags":[{"name":"读书","slug":"读书","permalink":"http://yoursite.com/tags/读书/"},{"name":"文摘","slug":"文摘","permalink":"http://yoursite.com/tags/文摘/"}]}]