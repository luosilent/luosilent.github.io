[{"title":"每天读点文学3","date":"2017-08-20T15:48:55.000Z","path":"2017/08/20/每日读点文学3/","text":"每天读点文学 别在树下徘徊，别在雨中沉思，别在黑暗中落泪。向前看，不要回头，只要你勇于面对抬起头来，就会发现，分数的阴霾不过是短暂的雨季。向前看，还有一片明亮的天，不会使人感到彷徨。——莎士比亚 《暴风雨》","raw":"---\ntitle: 每天读点文学3\ndate: 2017-08-20 23:48:55\ntags:\n\n-\t文摘\n-\t笔记\n\n---\n\n## 每天读点文学 ##\n   \n![test](http://wx1.sinaimg.cn/mw690/0069ddnsgy1fiqm72gillj30c80c7q3k.jpg)  \n\n  \n别在树下徘徊，别在雨中沉思，别在黑暗中落泪。向前看，不要回头，只要你勇于面对抬起头来，就会发现，分数的阴霾不过是短暂的雨季。向前看，还有一片明亮的天，不会使人感到彷徨。  \n——莎士比亚 《暴风雨》\n\n","content":"<h2 id=\"每天读点文学\"><a href=\"#每天读点文学\" class=\"headerlink\" title=\"每天读点文学\"></a>每天读点文学</h2><p><img src=\"http://wx1.sinaimg.cn/mw690/0069ddnsgy1fiqm72gillj30c80c7q3k.jpg\" alt=\"test\">  </p>\n<p>别在树下徘徊，别在雨中沉思，别在黑暗中落泪。向前看，不要回头，只要你勇于面对抬起头来，就会发现，分数的阴霾不过是短暂的雨季。向前看，还有一片明亮的天，不会使人感到彷徨。<br>——莎士比亚 《暴风雨》</p>\n","slug":"每日读点文学3","updated":"2017-08-20T15:53:31.715Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/20/每日读点文学3/","excerpt":"","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://luoing.top/tags/笔记/"},{"name":"文摘","slug":"文摘","permalink":"http://luoing.top/tags/文摘/"}]},{"title":"xpath和css解析","date":"2017-08-20T15:11:27.000Z","path":"2017/08/20/xpath和css解析/","text":"网页解析一. xpath 简介与语法概要 xpath 是 w3c 的一种标准。简单来说就是可以让我们以路径的形式访问 html 网页中的各个元素。其中最主要的两个 为 // 与 /。前者代表 路径下的所有元素， 后者代表路径下的子元素。具体语法如下： 基本语法： question # 选取所有 question 元素的所有子节点 /question #选取根元素 question question/a # 选取 question 元素下所有为 a 的子元素 //div # 选取所有的 div 元素，不论其出现在文档的任何地方 question//div # 选取 question 元素下所有的 div 后代元素 (/ 选取的是直接子元素，这里是所有的后代元素) question//span/text() #选取 question 元素下所有 span 元素中的文本值 question//a/@href #选取 question 元素下所有 a 元素中的 href 属性值。 @ 后面可以是任意属性名，均可以取到值 带有限定性质的语法： /question/div[1] # 选取 question 的第一个 div 子元素。 注意这里第一个是从索引 1 开始的 /question/div[last()] # 选取 question 第最后一个 div 子元素 /question/div[last()-1] # 选取 question 的倒数第二个 div 子元素 //div[@lang] # 选取所有拥有lang 属性的 div 元素 //div[@lang=’eng’] # 选取所有 lang 属性为 eng 的 div 元素 其他语法补充： /div/* # 选取属于 div 元素的所有子节点 //* # 选取所有元素 //div/a | //div/p #选 取所有 div 元素的 a 元素或者 p 元素 //span | //input # 选取文档中所有的 span 和 input 元素 二. css 语法概要 熟悉前端的同学对 css 选择器一定不会陌生，比如 jQuery 中通过各种 css 选择器语法进行 DOM 操作等。这里对其语法进行简要的总结，便于复习。 基本查询语法 * # 选取所有节点 #title # 选取 id 为 title 的元素 .col-md # 选取所有 class 包含 col-md 的元素 li a # 选取所有 li 下的 a 元素 ul + p # 选取 ul 后面的第一个 p 元素 div#title &gt; ul # 选取 id 为 title 的 div 的第一个 ul 子元素 ul ~ p # 选取 与 url 相邻的所有 p 元素 span#title ::text # 选取 id 为 title 的 span 元素的文本值 a.link::attr(href) # 选取 class 为 link 的 a 元素的 href 属性值 属性相关查询语法 a[title] # 选取所有有 title 属性的 a 元素 a[href=&apos;http://stackoverflow.com/&apos;] # 选取所有 href 属性为 http://stackoverflow.com/ 的 a 元素 a[href*=&quot;stackoverflow&quot;] # 选取所有 href 属性包含 stackoverflow 的 a 元素 a[href^=&apos;https&apos;] # 选取所有 href 属性值以 https 开头的 a 元素 a[href$=&apos;.jpg&apos;] # 选取所有 href 属性值以 .jpg 为结尾的 a 元素 input[type=radio]:checked # 选择选中的 radio 的元素 其他语法 div:not(.title) # 选取所有 class 不是 title 的 div 元素 li:nth-child(3) # 选取第三个元素 tr:nth-child(2n) # 第偶数个元素","raw":"---\ntitle: xpath和css解析\ndate: 2017-08-20 23:11:27\ntags:\n\n-\t网页\n-\txpath\n-\tcss\n\n---\n## 网页解析 ##\n\n一.\txpath 简介与语法概要\n\nxpath 是 w3c 的一种标准。简单来说就是可以让我们以路径的形式访问 html 网页中的各个元素。其中最主要的两个 为 // 与 /。前者代表 路径下的所有元素， 后者代表路径下的子元素。具体语法如下：\n\n基本语法：\n\n1. question      # 选取所有 question 元素的所有子节点  \n1. \t/question     #选取根元素 question  \n1. \tquestion/a    # 选取 question 元素下所有为 a 的子元素  \n1. \t//div         # 选取所有的 div 元素，不论其出现在文档的任何地方  \n1. \tquestion//div # 选取 question 元素下所有的 div 后代元素 (/ 选取的是直接子元素，这里是所有的后代元素)  \n1. \tquestion//span/text() #选取 question 元素下所有 span 元素中的文本值  \n1. \tquestion//a/@href     #选取 question 元素下所有 a 元素中的 href 属性值。 @ 后面可以是任意属性名，均可以取到值  \n\n\n带有限定性质的语法：\n\n1.\t /question/div[1]        # 选取 question 的第一个 div 子元素。 注意这里第一个是从索引 1 开始的\n1. \t/question/div[last()]   # 选取 question 第最后一个 div 子元素\n1. \t/question/div[last()-1] # 选取 question 的倒数第二个 div 子元素\n1. \t//div[@lang]            # 选取所有拥有lang 属性的 div 元素\n1. \t//div[@lang='eng']      # 选取所有 lang 属性为 eng 的 div 元素\n\n其他语法补充：\n\n1. \t/div/*    # 选取属于 div 元素的所有子节点\n1. \t//*       # 选取所有元素\n1. \t//div/a | //div/p #选 取所有 div 元素的 a 元素或者 p 元素\n1. \t//span | //input  # 选取文档中所有的 span 和 input 元素\n\n\n二. css 语法概要\n\n熟悉前端的同学对 css 选择器一定不会陌生，比如 jQuery 中通过各种 css 选择器语法进行 DOM 操作等。这里对其语法进行简要的总结，便于复习。\n\n基本查询语法\n\t\n\t *        # 选取所有节点\n\t#title    # 选取 id 为 title 的元素\n\t.col-md   # 选取所有 class 包含 col-md 的元素\n\tli a      # 选取所有 li 下的 a 元素\n\tul + p    # 选取 ul 后面的第一个 p 元素\n\tdiv#title > ul   # 选取 id 为 title 的 div 的第一个 ul 子元素\n\tul ~ p    # 选取 与 url 相邻的所有 p 元素\n\tspan#title ::text  # 选取 id 为 title 的 span 元素的文本值\n\ta.link::attr(href) # 选取 class 为 link 的 a 元素的 href 属性值\n\n属性相关查询语法\n\n\t\n\ta[title]  # 选取所有有 title 属性的 a 元素\n\ta[href='http://stackoverflow.com/'] # 选取所有 href 属性为 http://stackoverflow.com/ 的 a 元素\n\ta[href*=\"stackoverflow\"] # 选取所有 href 属性包含 stackoverflow 的 a 元素\n\ta[href^='https'] # 选取所有 href 属性值以 https 开头的 a 元素\n\ta[href$='.jpg']  # 选取所有 href 属性值以 .jpg 为结尾的 a 元素\n\tinput[type=radio]:checked # 选择选中的 radio 的元素\n\n其他语法\n\t\n\tdiv:not(.title)   # 选取所有 class 不是 title 的 div 元素\n\tli:nth-child(3) # 选取第三个元素\n\ttr:nth-child(2n) # 第偶数个元素\n","content":"<h2 id=\"网页解析\"><a href=\"#网页解析\" class=\"headerlink\" title=\"网页解析\"></a>网页解析</h2><p>一.    xpath 简介与语法概要</p>\n<p>xpath 是 w3c 的一种标准。简单来说就是可以让我们以路径的形式访问 html 网页中的各个元素。其中最主要的两个 为 // 与 /。前者代表 路径下的所有元素， 后者代表路径下的子元素。具体语法如下：</p>\n<p>基本语法：</p>\n<ol>\n<li>question      # 选取所有 question 元素的所有子节点  </li>\n<li>/question     #选取根元素 question  </li>\n<li>question/a    # 选取 question 元素下所有为 a 的子元素  </li>\n<li>//div         # 选取所有的 div 元素，不论其出现在文档的任何地方  </li>\n<li>question//div # 选取 question 元素下所有的 div 后代元素 (/ 选取的是直接子元素，这里是所有的后代元素)  </li>\n<li>question//span/text() #选取 question 元素下所有 span 元素中的文本值  </li>\n<li>question//a/@href     #选取 question 元素下所有 a 元素中的 href 属性值。 @ 后面可以是任意属性名，均可以取到值  </li>\n</ol>\n<p>带有限定性质的语法：</p>\n<ol>\n<li>/question/div[1]        # 选取 question 的第一个 div 子元素。 注意这里第一个是从索引 1 开始的</li>\n<li>/question/div[last()]   # 选取 question 第最后一个 div 子元素</li>\n<li>/question/div[last()-1] # 选取 question 的倒数第二个 div 子元素</li>\n<li>//div[@lang]            # 选取所有拥有lang 属性的 div 元素</li>\n<li>//div[@lang=’eng’]      # 选取所有 lang 属性为 eng 的 div 元素</li>\n</ol>\n<p>其他语法补充：</p>\n<ol>\n<li>/div/*    # 选取属于 div 元素的所有子节点</li>\n<li>//*       # 选取所有元素</li>\n<li>//div/a | //div/p #选 取所有 div 元素的 a 元素或者 p 元素</li>\n<li>//span | //input  # 选取文档中所有的 span 和 input 元素</li>\n</ol>\n<p>二. css 语法概要</p>\n<p>熟悉前端的同学对 css 选择器一定不会陌生，比如 jQuery 中通过各种 css 选择器语法进行 DOM 操作等。这里对其语法进行简要的总结，便于复习。</p>\n<p>基本查询语法</p>\n<pre><code> *        # 选取所有节点\n#title    # 选取 id 为 title 的元素\n.col-md   # 选取所有 class 包含 col-md 的元素\nli a      # 选取所有 li 下的 a 元素\nul + p    # 选取 ul 后面的第一个 p 元素\ndiv#title &gt; ul   # 选取 id 为 title 的 div 的第一个 ul 子元素\nul ~ p    # 选取 与 url 相邻的所有 p 元素\nspan#title ::text  # 选取 id 为 title 的 span 元素的文本值\na.link::attr(href) # 选取 class 为 link 的 a 元素的 href 属性值\n</code></pre><p>属性相关查询语法</p>\n<pre><code>a[title]  # 选取所有有 title 属性的 a 元素\na[href=&apos;http://stackoverflow.com/&apos;] # 选取所有 href 属性为 http://stackoverflow.com/ 的 a 元素\na[href*=&quot;stackoverflow&quot;] # 选取所有 href 属性包含 stackoverflow 的 a 元素\na[href^=&apos;https&apos;] # 选取所有 href 属性值以 https 开头的 a 元素\na[href$=&apos;.jpg&apos;]  # 选取所有 href 属性值以 .jpg 为结尾的 a 元素\ninput[type=radio]:checked # 选择选中的 radio 的元素\n</code></pre><p>其他语法</p>\n<pre><code>div:not(.title)   # 选取所有 class 不是 title 的 div 元素\nli:nth-child(3) # 选取第三个元素\ntr:nth-child(2n) # 第偶数个元素\n</code></pre>","slug":"xpath和css解析","updated":"2017-08-20T15:28:45.556Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/20/xpath和css解析/","excerpt":"","categories":[],"tags":[{"name":"网页","slug":"网页","permalink":"http://luoing.top/tags/网页/"},{"name":"xpath","slug":"xpath","permalink":"http://luoing.top/tags/xpath/"},{"name":"css","slug":"css","permalink":"http://luoing.top/tags/css/"}]},{"title":"爬虫的理论知识储备","date":"2017-08-18T15:23:09.000Z","path":"2017/08/18/爬虫的理论知识储备/","text":"网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。 爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。 1.浏览网页的过程 浏览网页的过程其实就是浏览器作为一个浏览的“客户端”，向服务器端发送了 一次请求，把服务器端的文件“抓”到本地，再进行解释、展现。 使用统一资源定位符URL来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。通过超文本传送协议HTTP来实现万维网上各种连接，使用TCP连接进行可靠的传送。使用超文本标记语言HTML使得网页设计者可以很方便地用链接从本页面的某处链接到任意网页，并在自己主机屏幕上显示。 2.统一资源定位符URL URL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的指针。由于访问不同对象使用的协议不同，URL还能之处读取某个对象时所使用的协议。URL的一般形式为： &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 协议是指用哪种协议获取该万维网文档，如http，ftp；主机是指该网络文档所在主机的域名；端口和路径有时可以省略。对万维网的网点访问使用HTTP协议，HTTP的默认端口号是80，通常可省略。若在省略文件的路径，则URL就指到因特网上的某个主页。如： www.baidu.com。 3.超文本传送协议HTTP HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。下图给出了万维网的大致工作过程。 HTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码穿构成的请求和一个“MIME-like”的响应组成，HTTP报文通常都使用TCP连接传送。 HTTP有两类报文：请求报文（从客户向服务器发送请求报文）和响应报文（从服务器到客户的回答）。HTTP请求报文和响应报文都是由三部分组成，两种报文格式的区别就是开始行不同。 开始行 用于区分是请求报文还是响应报文。开始行在两种报文中分别叫请求行和状态行。 首部行 用来说明浏览器或报文主题的一些信息。 实体主体 在请求报文中一般不用该字段，而在响应报文中也可能没有该字段。 请求行只有三个内容，即方法、请求资源URL和HTTP的版本。下表给出了请求报文中常用的几种方法。 方法意义 GET请求读取URL标志的信息 OPTION请求一些选项的信息 HEAD请求读取URL标志信息的首部 POST给服务器添加信息，如注释 PUT在致命的URL下存储一个文档 DELETE删除致命的URL所标志的资源 CONNECT用于代理服务器 GET http://www.bilibili.com/video/douga.html HTTP/1.1 下面是一个请求报文的例子 4。超文本标记语言HTML HTML指的是超文本标记语言，是使用标记标签来描述网页的。 HTML标签是由尖括号包围的关键词，比如&lt;html&gt;。HTML标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个是结束标签，比如&lt;b&gt;和&lt;/b&gt;。 HTML文档包含HTML标签和纯文本，也称为网页。Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。 五个基本的标签 &lt;h1&gt; - &lt;h6&gt;等：定义HTML 标题。 &lt;p&gt;：定义HTML 段落。 &lt;a&gt;：定义HTML 链接。 &lt;img&gt;：定义HTML 图像。 &lt;div&gt; :HTML分组标签，定义文档中的分区或节。 &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;h2&gt;This is a heading&lt;/h2&gt; &lt;h3&gt;This is a heading&lt;/h3&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;p&gt;This is another paragraph.&lt;/p&gt; &lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt; &lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt; HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。元素的内容是开始标签与结束标签之间的内容。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素），HTML 文档由嵌套的 HTML 元素构成。如下例包含3个HTML元素。 &lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; HTML 属性：HTML 标签可以拥有属性，属性提供了有关 HTML 元素的更多的信息，属性总是以名称/值对的形式出现，比如：name=”value”，属性总是在 HTML 元素的开始标签中规定；属性值应该始终被包括在引号内，双引号是最常用的，不过使用单引号也没有问题。 HTML链接由&lt;a&gt;标签定义，链接的地址在 href 属性中指定： &lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;a&gt; 转载于作者：Mr希灵 链接：http://www.jianshu.com/p/0cec67708277","raw":"---\ntitle: 爬虫的理论知识储备\ndate: 2017-08-18 23:23:09\ntags:\n\n-\tHTML\n-\t爬虫\n\t\n---\n\n网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。\n\n爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。\n\n1.浏览网页的过程\n\n* 浏览网页的过程其实就是浏览器作为一个浏览的“客户端”，向服务器端发送了 一次请求，把服务器端的文件“抓”到本地，再进行解释、展现。\n\n* 使用统一资源定位符URL来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。\n通过超文本传送协议HTTP来实现万维网上各种连接，使用TCP连接进行可靠的传送。\n使用超文本标记语言HTML使得网页设计者可以很方便地用链接从本页面的某处链接到任意网页，并在自己主机屏幕上显示。\n\n2.统一资源定位符URL\n\nURL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的指针。由于访问不同对象使用的协议不同，URL还能之处读取某个对象时所使用的协议。URL的一般形式为：\n\n\t<协议>://<主机>:<端口>/<路径>\n协议是指用哪种协议获取该万维网文档，如http，ftp；主机是指该网络文档所在主机的域名；端口和路径有时可以省略。对万维网的网点访问使用HTTP协议，HTTP的默认端口号是80，通常可省略。若在省略文件的路径，则URL就指到因特网上的某个主页。如： www.baidu.com。\n\n3.超文本传送协议HTTP\n\nHTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。下图给出了万维网的大致工作过程。\n\n![Alt text](http://upload-images.jianshu.io/upload_images/53611-c9e7f5c52aab4a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\nHTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码穿构成的请求和一个“MIME-like”的响应组成，HTTP报文通常都使用TCP连接传送。\n\nHTTP有两类报文：请求报文（从客户向服务器发送请求报文）和响应报文（从服务器到客户的回答）。HTTP请求报文和响应报文都是由三部分组成，两种报文格式的区别就是开始行不同。\n\n1.\t**开始行** 用于区分是请求报文还是响应报文。开始行在两种报文中分别叫请求行和状态行。\n\n2.\t**首部行** 用来说明浏览器或报文主题的一些信息。\n\n3.\t**实体主体** 在请求报文中一般不用该字段，而在响应报文中也可能没有该字段。\n\n请求行只有三个内容，即**方法、请求资源URL和HTTP的版本**。下表给出了请求报文中常用的几种方法。\n<table> \n\t<th>方法</th><th>意义</th>\n    <tr><th>GET</th><th>请求读取URL标志的信息</th>       \n    <tr> <th>OPTION</th><th>请求一些选项的信息</th>\n\t<tr><th>HEAD</th><th>请求读取URL标志信息的首部</th>\n\t<tr><th>POST</th><th>给服务器添加信息，如注释</th>\n\t<tr><th>PUT</th><th>在致命的URL下存储一个文档</th>\n    <tr><th>DELETE</th><th>删除致命的URL所标志的资源</th>\n\t<tr><th>CONNECT</th><th>用于代理服务器</th>\n</table>\n\n\n\tGET http://www.bilibili.com/video/douga.html  HTTP/1.1\n\n下面是一个请求报文的例子\n\n![Alt text](http://upload-images.jianshu.io/upload_images/53611-ec8d7daf1793749a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n4。超文本标记语言HTML\n\nHTML指的是超文本标记语言，是使用标记标签来描述网页的。\n\nHTML标签是由尖括号包围的关键词，比如&lt;html>。HTML标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个是结束标签，比如&lt;b>和&lt;/b>。\n\nHTML文档包含HTML标签和纯文本，也称为网页。Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。\n\n五个基本的标签\n\n*\t&lt;h1> - &lt;h6>等：定义HTML 标题。\n*\t&lt;p>：定义HTML 段落。\n*\t&lt;a>：定义HTML 链接。\n*\t&lt;img>：定义HTML 图像。\n*\t&lt;div> :HTML分组标签，定义文档中的分区或节。\n\t\n\t\n\t\t<h1>This is a heading</h1>\n\t\t<h2>This is a heading</h2>\n\t\t<h3>This is a heading</h3>\n\t\t\n\t\t<p>This is a paragraph.</p>\n\t\t<p>This is another paragraph.</p>\n\t\t<a href=\"http://www.w3school.com.cn\">This is a link</a>\n\t\n\t\t<img src=\"w3school.jpg\" width=\"104\" height=\"142\" />\nHTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。元素的内容是开始标签与结束标签之间的内容。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素），HTML 文档由嵌套的 HTML 元素构成。如下例包含3个HTML元素。\n\t\n\t<html>\n\t    <body>\n\t        <p>This is my first paragraph.</p>\n\t    </body>\n\t</html>\nHTML 属性：HTML 标签可以拥有属性，属性提供了有关 HTML 元素的更多的信息，属性总是以名称/值对的形式出现，比如：name=\"value\"，属性总是在 HTML 元素的开始标签中规定；属性值应该始终被包括在引号内，双引号是最常用的，不过使用单引号也没有问题。\n\n\nHTML链接由&lt;a>标签定义，链接的地址在 href 属性中指定：\n\n\t<a href=\"http://www.w3school.com.cn\">This is a link<a>\n\n转载于作者：Mr希灵\n\n链接：<http://www.jianshu.com/p/0cec67708277>\n\n","content":"<p>网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。</p>\n<p>爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。</p>\n<p>1.浏览网页的过程</p>\n<ul>\n<li><p>浏览网页的过程其实就是浏览器作为一个浏览的“客户端”，向服务器端发送了 一次请求，把服务器端的文件“抓”到本地，再进行解释、展现。</p>\n</li>\n<li><p>使用统一资源定位符URL来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。<br>通过超文本传送协议HTTP来实现万维网上各种连接，使用TCP连接进行可靠的传送。<br>使用超文本标记语言HTML使得网页设计者可以很方便地用链接从本页面的某处链接到任意网页，并在自己主机屏幕上显示。</p>\n</li>\n</ul>\n<p>2.统一资源定位符URL</p>\n<p>URL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的指针。由于访问不同对象使用的协议不同，URL还能之处读取某个对象时所使用的协议。URL的一般形式为：</p>\n<pre><code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;\n</code></pre><p>协议是指用哪种协议获取该万维网文档，如http，ftp；主机是指该网络文档所在主机的域名；端口和路径有时可以省略。对万维网的网点访问使用HTTP协议，HTTP的默认端口号是80，通常可省略。若在省略文件的路径，则URL就指到因特网上的某个主页。如： www.baidu.com。</p>\n<p>3.超文本传送协议HTTP</p>\n<p>HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。下图给出了万维网的大致工作过程。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/53611-c9e7f5c52aab4a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>HTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码穿构成的请求和一个“MIME-like”的响应组成，HTTP报文通常都使用TCP连接传送。</p>\n<p>HTTP有两类报文：请求报文（从客户向服务器发送请求报文）和响应报文（从服务器到客户的回答）。HTTP请求报文和响应报文都是由三部分组成，两种报文格式的区别就是开始行不同。</p>\n<ol>\n<li><p><strong>开始行</strong> 用于区分是请求报文还是响应报文。开始行在两种报文中分别叫请求行和状态行。</p>\n</li>\n<li><p><strong>首部行</strong> 用来说明浏览器或报文主题的一些信息。</p>\n</li>\n<li><p><strong>实体主体</strong> 在请求报文中一般不用该字段，而在响应报文中也可能没有该字段。</p>\n</li>\n</ol>\n<p>请求行只有三个内容，即<strong>方法、请求资源URL和HTTP的版本</strong>。下表给出了请求报文中常用的几种方法。</p>\n<table><br>    <th>方法</th><th>意义</th><br>    <tr><th>GET</th><th>请求读取URL标志的信息</th><br>    </tr><tr> <th>OPTION</th><th>请求一些选项的信息</th><br>    </tr><tr><th>HEAD</th><th>请求读取URL标志信息的首部</th><br>    </tr><tr><th>POST</th><th>给服务器添加信息，如注释</th><br>    </tr><tr><th>PUT</th><th>在致命的URL下存储一个文档</th><br>    </tr><tr><th>DELETE</th><th>删除致命的URL所标志的资源</th><br>    </tr><tr><th>CONNECT</th><th>用于代理服务器</th><br></tr></table>\n\n\n<pre><code>GET http://www.bilibili.com/video/douga.html  HTTP/1.1\n</code></pre><p>下面是一个请求报文的例子</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/53611-ec8d7daf1793749a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>4。超文本标记语言HTML</p>\n<p>HTML指的是超文本标记语言，是使用标记标签来描述网页的。</p>\n<p>HTML标签是由尖括号包围的关键词，比如&lt;html&gt;。HTML标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个是结束标签，比如&lt;b&gt;和&lt;/b&gt;。</p>\n<p>HTML文档包含HTML标签和纯文本，也称为网页。Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。</p>\n<p>五个基本的标签</p>\n<ul>\n<li>&lt;h1&gt; - &lt;h6&gt;等：定义HTML 标题。</li>\n<li>&lt;p&gt;：定义HTML 段落。</li>\n<li>&lt;a&gt;：定义HTML 链接。</li>\n<li>&lt;img&gt;：定义HTML 图像。</li>\n<li>&lt;div&gt; :HTML分组标签，定义文档中的分区或节。</li>\n</ul>\n<pre><code>&lt;h1&gt;This is a heading&lt;/h1&gt;\n&lt;h2&gt;This is a heading&lt;/h2&gt;\n&lt;h3&gt;This is a heading&lt;/h3&gt;\n\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;p&gt;This is another paragraph.&lt;/p&gt;\n&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;\n\n&lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt;\n</code></pre><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。元素的内容是开始标签与结束标签之间的内容。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素），HTML 文档由嵌套的 HTML 元素构成。如下例包含3个HTML元素。</p>\n<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;p&gt;This is my first paragraph.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>HTML 属性：HTML 标签可以拥有属性，属性提供了有关 HTML 元素的更多的信息，属性总是以名称/值对的形式出现，比如：name=”value”，属性总是在 HTML 元素的开始标签中规定；属性值应该始终被包括在引号内，双引号是最常用的，不过使用单引号也没有问题。</p>\n<p>HTML链接由&lt;a&gt;标签定义，链接的地址在 href 属性中指定：</p>\n<pre><code>&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;a&gt;\n</code></pre><p>转载于作者：Mr希灵</p>\n<p>链接：<a href=\"http://www.jianshu.com/p/0cec67708277\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/0cec67708277</a></p>\n","slug":"爬虫的理论知识储备","updated":"2017-08-19T09:01:08.571Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/18/爬虫的理论知识储备/","excerpt":"","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://luoing.top/tags/HTML/"},{"name":"爬虫","slug":"爬虫","permalink":"http://luoing.top/tags/爬虫/"}]},{"title":"每天读点文学2","date":"2017-08-17T12:12:14.000Z","path":"2017/08/17/每天读点文学/","text":"每天读点文学 我喜欢回顾，是因为我不喜欢忘记。我总认为，在世间，有些人、有些事、有些时刻似乎都有一种特定的安排，在当时也许不觉得，但是在以后回想起来，却都有一种深意。我有过许多美丽的时刻，实在舍不得将它们忘记。 ——席慕容《透明的哀伤》","raw":"---\ntitle: 每天读点文学2\ndate: 2017-08-17 20:12:14\ntags:\n\n-\t读书\n-\t文摘\n\n---\n\n\n## 每天读点文学 ##\n\n![test](http://wx2.sinaimg.cn/small/0069ddnsgy1fiof37k8xbj305k05kdfs.jpg)  \n\n\n\n\n我喜欢回顾，是因为我不喜欢忘记。我总认为，在世间，有些人、有些事、有些时刻似乎都有一种特定的安排，在当时也许不觉得，但是在以后回想起来，却都有一种深意。我有过许多美丽的时刻，实在舍不得将它们忘记。\n ——席慕容《透明的哀伤》\n\n\n","content":"<h2 id=\"每天读点文学\"><a href=\"#每天读点文学\" class=\"headerlink\" title=\"每天读点文学\"></a>每天读点文学</h2><p><img src=\"http://wx2.sinaimg.cn/small/0069ddnsgy1fiof37k8xbj305k05kdfs.jpg\" alt=\"test\">  </p>\n<p>我喜欢回顾，是因为我不喜欢忘记。我总认为，在世间，有些人、有些事、有些时刻似乎都有一种特定的安排，在当时也许不觉得，但是在以后回想起来，却都有一种深意。我有过许多美丽的时刻，实在舍不得将它们忘记。<br> ——席慕容《透明的哀伤》</p>\n","slug":"每天读点文学","updated":"2017-08-20T15:54:04.781Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/17/每天读点文学/","excerpt":"","categories":[],"tags":[{"name":"读书","slug":"读书","permalink":"http://luoing.top/tags/读书/"},{"name":"文摘","slug":"文摘","permalink":"http://luoing.top/tags/文摘/"}]},{"title":"Python 技巧总结","date":"2017-08-17T06:43:01.000Z","path":"2017/08/17/Python-技巧总结/","text":"1.枚举 - enumerate 可以有参数哦 之前我们这样操作： i = 0 for item in iterable: print i, item i += 1 现在我们这样操作： for i, item in enumerate(iterable): print i, item enumerate函数还可以接收第二个参数。就像下面这样： &gt;&gt;&gt;list(enumerate(&apos;abc&apos;)) [(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] &gt;&gt;&gt; list(enumerate(&apos;abc&apos;, 1)) [(1, &apos;a&apos;), (2, &apos;b&apos;), (3, &apos;c&apos;)] 2.字典/集合 解析 你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子： my_dict = {i: i * i for i in xrange(100)} my_set = {i * 15 for i in xrange(100)} # There is only a difference of &apos;:&apos; in both # 两者的区别在于字典推导中有冒号 3.强制浮点除法 from __future__ import division result = 1/2 # print(result) # 0.5 4.对Python表达式求值 我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作： import ast my_list = ast.literal_eval(expr) 来代替以下这种操作： expr = &quot;[1, 2, 3]&quot; my_list = eval(expr) 我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。 5.字符串/数列 逆序 你可以用以下方法快速逆序排列数列： &gt;&gt;&gt; a = [1,2,3,4] &gt;&gt;&gt; a[::-1] [4, 3, 2, 1] # This creates a new reversed list. # If you want to reverse a list in place you can do: a.reverse() 这总方式也同样适用于字符串的逆序： &gt;&gt;&gt; foo = &quot;yasoob&quot; &gt;&gt;&gt; foo[::-1] &apos;boosay&apos; 6.三元运算 三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。 [on_true] if [expression] else [on_false] x, y = 50, 25 small = x if x &lt; y else y 7.Python里面如何拷贝一个对象 标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象. import copy new_list = copy.copy(existing_list) 有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法: import copy new_list_of_dicts = copy.deepcopy(existing_list_of_dicts) copy(x) Shallow copy operation on arbitrary Python objects. deepcopy(x, memo=None, _nil=[]) Deep copy operation on arbitrary Python objects. 8.python中如何判断对象相等 首先是C#中字符串的==和equal方法。 “==” : 对于内置值类型而言， == 判断两个内存值是否相等。 对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。 对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。 “equals” : 对于值类型而言， 内存相等才返回true。 对于引用类型而言，指向同一个引用才算相等。 但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。 python中的 == python中的对象包含三要素:id, type, value id 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。 is 判断是否是一个对象，使用id来判断的。 == 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。 9.命名技巧 今天阅读代码，发现一个不错的函数命名方式: def request(_argv): 就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。 10.开发者工具集锦 pydoc： 模块可以根据源代码中的docstrings为任何可导入模块生成格式良好的文档。 doctest模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。 unittest模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。 trace：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。 pdb：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。profile, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。 compileall: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。YAPF：Google开源的Python代码格式化工具。 iPDB: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。 pycallgraph: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。 objgraph: objgraph对于查找内存泄露非常有用。 转载原文by litaotao https://litaotao.github.io/python-materials","raw":"---\ntitle: Python 技巧总结\ndate: 2017-08-17 14:43:01\ntags:\n\n-\tpython\n-\t笔记\n\t\n---\n\n\n\n1.枚举 - enumerate 可以有参数哦\n\n之前我们这样操作：\n\n\ti = 0\n\tfor item in iterable:\n    \tprint i, item\n    \ti += 1\n现在我们这样操作：\n\n\tfor i, item in enumerate(iterable):\n    \tprint i, item\nenumerate函数还可以接收第二个参数。就像下面这样：\n\n\t>>>list(enumerate('abc')) \n\n\t[(0, 'a'), (1, 'b'), (2, 'c')] \n \n\t>>> list(enumerate('abc', 1)) \n\t[(1, 'a'), (2, 'b'), (3, 'c')]\n2.字典/集合 解析\n\n你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子：\n\n\tmy_dict = {i: i * i for i in xrange(100)} \n\tmy_set = {i * 15 for i in xrange(100)}\n \n\t# There is only a difference of ':' in both\n \n\t# 两者的区别在于字典推导中有冒号\n3.强制浮点除法\n\n\tfrom __future__ import division \n\tresult = 1/2\n\t# print(result)\n\t# 0.5\n4.对Python表达式求值\n\n我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作：\n\n\timport ast \n\tmy_list = ast.literal_eval(expr)  \n来代替以下这种操作：\n\n\texpr = \"[1, 2, 3]\"\n\tmy_list = eval(expr)\n我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。\n\n5.字符串/数列 逆序\n\n你可以用以下方法快速逆序排列数列：\n\n\t>>> a = [1,2,3,4]\n\t>>> a[::-1]\n\t[4, 3, 2, 1]\n \n\t# This creates a new reversed list. \n\t# If you want to reverse a list in place you can do:\n\t \n\ta.reverse()\n这总方式也同样适用于字符串的逆序：\n\n\t>>> foo = \"yasoob\"\n\t>>> foo[::-1]\n\t'boosay'\n6.三元运算\n\n三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。\n\n\t[on_true] if [expression] else [on_false]\n\tx, y = 50, 25\n\tsmall = x if x < y else y\n7.Python里面如何拷贝一个对象\n\n标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.\n\n\timport copy\n\tnew_list = copy.copy(existing_list)\n有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:\n\n\timport copy\n\tnew_list_of_dicts = copy.deepcopy(existing_list_of_dicts)\n\tcopy(x)\n\tShallow copy operation on arbitrary Python objects.\n\t \n\tdeepcopy(x, memo=None, _nil=[])\n\tDeep copy operation on arbitrary Python objects.\n8.python中如何判断对象相等\n\n\t首先是C#中字符串的==和equal方法。\n\t“==” :\n\t对于内置值类型而言， == 判断两个内存值是否相等。\n\t对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。\n\t对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。\n\t“equals” :\n\t对于值类型而言， 内存相等才返回true。\n\t对于引用类型而言，指向同一个引用才算相等。\n\t但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。\n\tpython中的 ==\n\tpython中的对象包含三要素:id, type, value\n\tid 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。\n\tis 判断是否是一个对象，使用id来判断的。\n\t== 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。\n9.命名技巧\n\n今天阅读代码，发现一个不错的函数命名方式:\n\t\n\tdef request(_argv):  \n就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。\n\n10.开发者工具集锦\n\n*\tpydoc： 模块可以根据源代码中的docstrings为任何可导入模块生成格式良好的文档。\n*\tdoctest模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。\n*\tunittest模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。\n*\ttrace：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。\n*\tpdb：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。\nprofile, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。\n*\tcompileall: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。\nYAPF：Google开源的Python代码格式化工具。\n*\tiPDB: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。\n*\tpycallgraph: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。\n*\tobjgraph: objgraph对于查找内存泄露非常有用。\n\n \n\n  ![图标][id]\n  [id]: https://litaotao.github.io/images/pycallgraph.jpg   \n\n\n\n\n转载原文by litaotao <https://litaotao.github.io/python-materials>\n\n\n\n\n\n\n","content":"<p>1.枚举 - enumerate 可以有参数哦</p>\n<p>之前我们这样操作：</p>\n<pre><code>i = 0\nfor item in iterable:\n    print i, item\n    i += 1\n</code></pre><p>现在我们这样操作：</p>\n<pre><code>for i, item in enumerate(iterable):\n    print i, item\n</code></pre><p>enumerate函数还可以接收第二个参数。就像下面这样：</p>\n<pre><code>&gt;&gt;&gt;list(enumerate(&apos;abc&apos;)) \n\n[(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] \n\n&gt;&gt;&gt; list(enumerate(&apos;abc&apos;, 1)) \n[(1, &apos;a&apos;), (2, &apos;b&apos;), (3, &apos;c&apos;)]\n</code></pre><p>2.字典/集合 解析</p>\n<p>你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子：</p>\n<pre><code>my_dict = {i: i * i for i in xrange(100)} \nmy_set = {i * 15 for i in xrange(100)}\n\n# There is only a difference of &apos;:&apos; in both\n\n# 两者的区别在于字典推导中有冒号\n</code></pre><p>3.强制浮点除法</p>\n<pre><code>from __future__ import division \nresult = 1/2\n# print(result)\n# 0.5\n</code></pre><p>4.对Python表达式求值</p>\n<p>我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作：</p>\n<pre><code>import ast \nmy_list = ast.literal_eval(expr)  \n</code></pre><p>来代替以下这种操作：</p>\n<pre><code>expr = &quot;[1, 2, 3]&quot;\nmy_list = eval(expr)\n</code></pre><p>我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。</p>\n<p>5.字符串/数列 逆序</p>\n<p>你可以用以下方法快速逆序排列数列：</p>\n<pre><code>&gt;&gt;&gt; a = [1,2,3,4]\n&gt;&gt;&gt; a[::-1]\n[4, 3, 2, 1]\n\n# This creates a new reversed list. \n# If you want to reverse a list in place you can do:\n\na.reverse()\n</code></pre><p>这总方式也同样适用于字符串的逆序：</p>\n<pre><code>&gt;&gt;&gt; foo = &quot;yasoob&quot;\n&gt;&gt;&gt; foo[::-1]\n&apos;boosay&apos;\n</code></pre><p>6.三元运算</p>\n<p>三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。</p>\n<pre><code>[on_true] if [expression] else [on_false]\nx, y = 50, 25\nsmall = x if x &lt; y else y\n</code></pre><p>7.Python里面如何拷贝一个对象</p>\n<p>标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.</p>\n<pre><code>import copy\nnew_list = copy.copy(existing_list)\n</code></pre><p>有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:</p>\n<pre><code>import copy\nnew_list_of_dicts = copy.deepcopy(existing_list_of_dicts)\ncopy(x)\nShallow copy operation on arbitrary Python objects.\n\ndeepcopy(x, memo=None, _nil=[])\nDeep copy operation on arbitrary Python objects.\n</code></pre><p>8.python中如何判断对象相等</p>\n<pre><code>首先是C#中字符串的==和equal方法。\n“==” :\n对于内置值类型而言， == 判断两个内存值是否相等。\n对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。\n对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。\n“equals” :\n对于值类型而言， 内存相等才返回true。\n对于引用类型而言，指向同一个引用才算相等。\n但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。\npython中的 ==\npython中的对象包含三要素:id, type, value\nid 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。\nis 判断是否是一个对象，使用id来判断的。\n== 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。\n</code></pre><p>9.命名技巧</p>\n<p>今天阅读代码，发现一个不错的函数命名方式:</p>\n<pre><code>def request(_argv):  \n</code></pre><p>就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。</p>\n<p>10.开发者工具集锦</p>\n<ul>\n<li>pydoc： 模块可以根据源代码中的docstrings为任何可导入模块生成格式良好的文档。</li>\n<li>doctest模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。</li>\n<li>unittest模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。</li>\n<li>trace：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。</li>\n<li>pdb：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。<br>profile, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。</li>\n<li>compileall: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。<br>YAPF：Google开源的Python代码格式化工具。</li>\n<li>iPDB: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。</li>\n<li>pycallgraph: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。</li>\n<li>objgraph: objgraph对于查找内存泄露非常有用。</li>\n</ul>\n<p>  <img src=\"https://litaotao.github.io/images/pycallgraph.jpg\" alt=\"图标\"></p>\n<p>转载原文by litaotao <a href=\"https://litaotao.github.io/python-materials\" target=\"_blank\" rel=\"external\">https://litaotao.github.io/python-materials</a></p>\n","slug":"Python-技巧总结","updated":"2017-08-19T09:00:01.869Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/17/Python-技巧总结/","excerpt":"","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://luoing.top/tags/python/"},{"name":"笔记","slug":"笔记","permalink":"http://luoing.top/tags/笔记/"}]},{"title":"每天读点文学1","date":"2017-08-16T15:12:14.000Z","path":"2017/08/16/first/","text":"每天读点文学 不要着急，最好的总会在最不经意的时候出现。那我们要做的就是：怀揣希望去努力，静待美好的出现。————泰戈尔 ​​​​","raw":"---\ntitle: 每天读点文学1\ndate: 2017-08-16 23:12:14\ntags:\n\n-\t读书\n-\t文摘\n\t\n---\n\n## 每天读点文学 ##  \n\n![test](http://wx3.sinaimg.cn/mw690/0069ddnsgy1fiod974sc3j30c80c8gn1.jpg)  \n\n\n不要着急，最好的总会在最不经意的时候出现。那我们要做的就是：怀揣希望去努力，静待美好的出现。————泰戈尔 ​​​​\n\n\n\n","content":"<h2 id=\"每天读点文学\"><a href=\"#每天读点文学\" class=\"headerlink\" title=\"每天读点文学\"></a>每天读点文学</h2><p><img src=\"http://wx3.sinaimg.cn/mw690/0069ddnsgy1fiod974sc3j30c80c8gn1.jpg\" alt=\"test\">  </p>\n<p>不要着急，最好的总会在最不经意的时候出现。那我们要做的就是：怀揣希望去努力，静待美好的出现。————泰戈尔 ​​​​</p>\n","slug":"first","updated":"2017-08-20T15:54:46.258Z","comments":true,"link":"","permalink":"http://luoing.top/2017/08/16/first/","excerpt":"","categories":[],"tags":[{"name":"读书","slug":"读书","permalink":"http://luoing.top/tags/读书/"},{"name":"文摘","slug":"文摘","permalink":"http://luoing.top/tags/文摘/"}]}]