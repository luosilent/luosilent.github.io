<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luosilent</title>
  <subtitle>黑白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luoing.top/"/>
  <updated>2017-08-21T06:07:49.213Z</updated>
  <id>http://luoing.top/</id>
  
  <author>
    <name>luosilent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天读点文学3</title>
    <link href="http://luoing.top/2017/08/20/%E6%AF%8F%E6%97%A5%E8%AF%BB%E7%82%B9%E6%96%87%E5%AD%A63/"/>
    <id>http://luoing.top/2017/08/20/每日读点文学3/</id>
    <published>2017-08-20T15:48:55.000Z</published>
    <updated>2017-08-21T06:07:49.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天读点文学"><a href="#每天读点文学" class="headerlink" title="每天读点文学"></a>每天读点文学</h2><p><img src="http://wx1.sinaimg.cn/mw690/0069ddnsgy1fiqm72gillj30c80c7q3k.jpg" alt="test">  </p>
<p>别在树下徘徊，别在雨中沉思，别在黑暗中落泪。向前看，不要回头，只要你勇于面对抬起头来，就会发现，分数的阴霾不过是短暂的雨季。向前看，还有一片明亮的天，不会使人感到彷徨。<br>——莎士比亚 《暴风雨》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天读点文学&quot;&gt;&lt;a href=&quot;#每天读点文学&quot; class=&quot;headerlink&quot; title=&quot;每天读点文学&quot;&gt;&lt;/a&gt;每天读点文学&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/mw690/0069ddnsgy1fiqm7
    
    </summary>
    
      <category term="文摘" scheme="http://luoing.top/categories/%E6%96%87%E6%91%98/"/>
    
    
      <category term="文摘" scheme="http://luoing.top/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>xpath和css解析</title>
    <link href="http://luoing.top/2017/08/20/xpath%E5%92%8Ccss%E8%A7%A3%E6%9E%90/"/>
    <id>http://luoing.top/2017/08/20/xpath和css解析/</id>
    <published>2017-08-20T15:11:27.000Z</published>
    <updated>2017-08-20T16:08:44.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-xpath-简介与语法概要"><a href="#一-xpath-简介与语法概要" class="headerlink" title="一.    xpath 简介与语法概要"></a>一.    xpath 简介与语法概要</h1><p>xpath 是 w3c 的一种标准。简单来说就是可以让我们以路径的形式访问 html 网页中的各个元素。其中最主要的两个 为 // 与 /。前者代表 路径下的所有元素， 后者代表路径下的子元素。具体语法如下：</p>
<p>基本语法：</p>
<ol>
<li>question      # 选取所有 question 元素的所有子节点  </li>
<li>/question     #选取根元素 question  </li>
<li>question/a    # 选取 question 元素下所有为 a 的子元素  </li>
<li>//div         # 选取所有的 div 元素，不论其出现在文档的任何地方  </li>
<li>question//div # 选取 question 元素下所有的 div 后代元素 (/ 选取的是直接子元素，这里是所有的后代元素)  </li>
<li>question//span/text() #选取 question 元素下所有 span 元素中的文本值  </li>
<li>question//a/@href     #选取 question 元素下所有 a 元素中的 href 属性值。 @ 后面可以是任意属性名，均可以取到值  </li>
</ol>
<p>带有限定性质的语法：</p>
<ol>
<li>/question/div[1]        # 选取 question 的第一个 div 子元素。 注意这里第一个是从索引 1 开始的</li>
<li>/question/div[last()]   # 选取 question 第最后一个 div 子元素</li>
<li>/question/div[last()-1] # 选取 question 的倒数第二个 div 子元素</li>
<li>//div[@lang]            # 选取所有拥有lang 属性的 div 元素</li>
<li>//div[@lang=’eng’]      # 选取所有 lang 属性为 eng 的 div 元素</li>
</ol>
<p>其他语法补充：</p>
<ol>
<li>/div/*    # 选取属于 div 元素的所有子节点</li>
<li>//*       # 选取所有元素</li>
<li>//div/a | //div/p #选 取所有 div 元素的 a 元素或者 p 元素</li>
<li>//span | //input  # 选取文档中所有的 span 和 input 元素</li>
</ol>
<h1 id="二-css-语法概要"><a href="#二-css-语法概要" class="headerlink" title="二. css 语法概要"></a>二. css 语法概要</h1><p>熟悉前端的同学对 css 选择器一定不会陌生，比如 jQuery 中通过各种 css 选择器语法进行 DOM 操作等。这里对其语法进行简要的总结，便于复习。</p>
<p>基本查询语法</p>
<pre><code> *        # 选取所有节点
#title    # 选取 id 为 title 的元素
.col-md   # 选取所有 class 包含 col-md 的元素
li a      # 选取所有 li 下的 a 元素
ul + p    # 选取 ul 后面的第一个 p 元素
div#title &gt; ul   # 选取 id 为 title 的 div 的第一个 ul 子元素
ul ~ p    # 选取 与 url 相邻的所有 p 元素
span#title ::text  # 选取 id 为 title 的 span 元素的文本值
a.link::attr(href) # 选取 class 为 link 的 a 元素的 href 属性值
</code></pre><p>属性相关查询语法</p>
<pre><code>a[title]  # 选取所有有 title 属性的 a 元素
a[href=&apos;http://stackoverflow.com/&apos;] # 选取所有 href 属性为 http://stackoverflow.com/ 的 a 元素
a[href*=&quot;stackoverflow&quot;] # 选取所有 href 属性包含 stackoverflow 的 a 元素
a[href^=&apos;https&apos;] # 选取所有 href 属性值以 https 开头的 a 元素
a[href$=&apos;.jpg&apos;]  # 选取所有 href 属性值以 .jpg 为结尾的 a 元素
input[type=radio]:checked # 选择选中的 radio 的元素
</code></pre><p>其他语法</p>
<pre><code>div:not(.title)   # 选取所有 class 不是 title 的 div 元素
li:nth-child(3) # 选取第三个元素
tr:nth-child(2n) # 第偶数个元素
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-xpath-简介与语法概要&quot;&gt;&lt;a href=&quot;#一-xpath-简介与语法概要&quot; class=&quot;headerlink&quot; title=&quot;一.    xpath 简介与语法概要&quot;&gt;&lt;/a&gt;一.    xpath 简介与语法概要&lt;/h1&gt;&lt;p&gt;xpath 是 w3
    
    </summary>
    
      <category term="网页解析" scheme="http://luoing.top/categories/%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="网页" scheme="http://luoing.top/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="xpath" scheme="http://luoing.top/tags/xpath/"/>
    
      <category term="css" scheme="http://luoing.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>爬虫的理论知识储备</title>
    <link href="http://luoing.top/2017/08/18/%E7%88%AC%E8%99%AB%E7%9A%84%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    <id>http://luoing.top/2017/08/18/爬虫的理论知识储备/</id>
    <published>2017-08-18T15:23:09.000Z</published>
    <updated>2017-08-20T16:14:07.291Z</updated>
    
    <content type="html"><![CDATA[<p>网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。</p>
<p>爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。</p>
<h2 id="1-浏览网页的过程"><a href="#1-浏览网页的过程" class="headerlink" title="1.浏览网页的过程"></a>1.浏览网页的过程</h2><ul>
<li><p>浏览网页的过程其实就是浏览器作为一个浏览的“客户端”，向服务器端发送了 一次请求，把服务器端的文件“抓”到本地，再进行解释、展现。</p>
</li>
<li><p>使用统一资源定位符URL来标志万维网上的各种文档，并使每一个文档在整个因特网的范围内具有唯一的标识符URL。<br>通过超文本传送协议HTTP来实现万维网上各种连接，使用TCP连接进行可靠的传送。<br>使用超文本标记语言HTML使得网页设计者可以很方便地用链接从本页面的某处链接到任意网页，并在自己主机屏幕上显示。</p>
</li>
</ul>
<h2 id="2-统一资源定位符URL"><a href="#2-统一资源定位符URL" class="headerlink" title="2.统一资源定位符URL"></a>2.统一资源定位符URL</h2><p>URL是用来表示从因特网上得到的资源位置和访问这些资源的方法。URL给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。URL相当于一个文件名在网络范围的扩展。因此，URL是与因特网相连的机器上的任何可访问对象的指针。由于访问不同对象使用的协议不同，URL还能之处读取某个对象时所使用的协议。URL的一般形式为：</p>
<pre><code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;
</code></pre><p>协议是指用哪种协议获取该万维网文档，如http，ftp；主机是指该网络文档所在主机的域名；端口和路径有时可以省略。对万维网的网点访问使用HTTP协议，HTTP的默认端口号是80，通常可省略。若在省略文件的路径，则URL就指到因特网上的某个主页。如： www.baidu.com。</p>
<h2 id="3-超文本传送协议HTTP"><a href="#3-超文本传送协议HTTP" class="headerlink" title="3.超文本传送协议HTTP"></a>3.超文本传送协议HTTP</h2><p>HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。下图给出了万维网的大致工作过程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/53611-c9e7f5c52aab4a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>HTTP规定在HTTP客户与HTTP服务器之间的每次交互，都由一个ASCII码穿构成的请求和一个“MIME-like”的响应组成，HTTP报文通常都使用TCP连接传送。</p>
<p>HTTP有两类报文：请求报文（从客户向服务器发送请求报文）和响应报文（从服务器到客户的回答）。HTTP请求报文和响应报文都是由三部分组成，两种报文格式的区别就是开始行不同。</p>
<ol>
<li><p><strong>开始行</strong> 用于区分是请求报文还是响应报文。开始行在两种报文中分别叫请求行和状态行。</p>
</li>
<li><p><strong>首部行</strong> 用来说明浏览器或报文主题的一些信息。</p>
</li>
<li><p><strong>实体主体</strong> 在请求报文中一般不用该字段，而在响应报文中也可能没有该字段。</p>
</li>
</ol>
<p>请求行只有三个内容，即<strong>方法、请求资源URL和HTTP的版本</strong>。下表给出了请求报文中常用的几种方法。</p>
<table><br>    <th>方法</th><th>意义<br>    </th><tr><th>GET</th><th>请求读取URL标志的信息<br>    </th></tr><tr> <th>OPTION</th><th>请求一些选项的信息<br>    </th></tr><tr><th>HEAD</th><th>请求读取URL标志信息的首部<br>    </th></tr><tr><th>POST</th><th>给服务器添加信息，如注释<br>    </th></tr><tr><th>PUT</th><th>在致命的URL下存储一个文档<br>    </th></tr><tr><th>DELETE</th><th>删除致命的URL所标志的资源<br>    </th></tr><tr><th>CONNECT</th><th>用于代理服务器<br></th></tr></table>


<pre><code>GET http://www.bilibili.com/video/douga.html  HTTP/1.1
</code></pre><p>下面是一个请求报文的例子</p>
<p><img src="http://upload-images.jianshu.io/upload_images/53611-ec8d7daf1793749a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<h2 id="4-超文本标记语言HTML"><a href="#4-超文本标记语言HTML" class="headerlink" title="4.超文本标记语言HTML"></a>4.超文本标记语言HTML</h2><p>HTML指的是超文本标记语言，是使用标记标签来描述网页的。</p>
<p>HTML标签是由尖括号包围的关键词，比如&lt;html&gt;。HTML标签通常是成对出现的，标签对中的第一个标签是开始标签，第二个是结束标签，比如&lt;b&gt;和&lt;/b&gt;。</p>
<p>HTML文档包含HTML标签和纯文本，也称为网页。Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容。</p>
<p>五个基本的标签</p>
<ul>
<li>&lt;h1&gt; - &lt;h6&gt;等：定义HTML 标题。</li>
<li>&lt;p&gt;：定义HTML 段落。</li>
<li>&lt;a&gt;：定义HTML 链接。</li>
<li>&lt;img&gt;：定义HTML 图像。</li>
<li>&lt;div&gt; :HTML分组标签，定义文档中的分区或节。</li>
</ul>
<pre><code>&lt;h1&gt;This is a heading&lt;/h1&gt;
&lt;h2&gt;This is a heading&lt;/h2&gt;
&lt;h3&gt;This is a heading&lt;/h3&gt;

&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;p&gt;This is another paragraph.&lt;/p&gt;
&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;

&lt;img src=&quot;w3school.jpg&quot; width=&quot;104&quot; height=&quot;142&quot; /&gt;
</code></pre><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。元素的内容是开始标签与结束标签之间的内容。大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素），HTML 文档由嵌套的 HTML 元素构成。如下例包含3个HTML元素。</p>
<pre><code>&lt;html&gt;
    &lt;body&gt;
        &lt;p&gt;This is my first paragraph.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>HTML 属性：HTML 标签可以拥有属性，属性提供了有关 HTML 元素的更多的信息，属性总是以名称/值对的形式出现，比如：name=”value”，属性总是在 HTML 元素的开始标签中规定；属性值应该始终被包括在引号内，双引号是最常用的，不过使用单引号也没有问题。</p>
<p>HTML链接由&lt;a&gt;标签定义，链接的地址在 href 属性中指定：</p>
<pre><code>&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;a&gt;
</code></pre><p>转载于作者：Mr希灵</p>
<p>链接：<a href="http://www.jianshu.com/p/0cec67708277" target="_blank" rel="external">http://www.jianshu.com/p/0cec67708277</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或脚本。&lt;/p&gt;
&lt;p&gt;爬虫通过网页的链接地址来寻找网页并获取网页内容，再根据网页中其他链接不断循环爬取。&lt;/p&gt;
&lt;h2 id=&quot;1-浏览网页的过程&quot;&gt;&lt;a href=&quot;#1-浏览网页的过程&quot; class=&quot;hea
    
    </summary>
    
      <category term="爬虫" scheme="http://luoing.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="HTML" scheme="http://luoing.top/tags/HTML/"/>
    
      <category term="爬虫" scheme="http://luoing.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>每天读点文学2</title>
    <link href="http://luoing.top/2017/08/17/%E6%AF%8F%E5%A4%A9%E8%AF%BB%E7%82%B9%E6%96%87%E5%AD%A6/"/>
    <id>http://luoing.top/2017/08/17/每天读点文学/</id>
    <published>2017-08-17T12:12:14.000Z</published>
    <updated>2017-08-21T06:07:53.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天读点文学"><a href="#每天读点文学" class="headerlink" title="每天读点文学"></a>每天读点文学</h2><p><img src="http://wx2.sinaimg.cn/small/0069ddnsgy1fiof37k8xbj305k05kdfs.jpg" alt="test">  </p>
<p>我喜欢回顾，是因为我不喜欢忘记。我总认为，在世间，有些人、有些事、有些时刻似乎都有一种特定的安排，在当时也许不觉得，但是在以后回想起来，却都有一种深意。我有过许多美丽的时刻，实在舍不得将它们忘记。<br> ——席慕容《透明的哀伤》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天读点文学&quot;&gt;&lt;a href=&quot;#每天读点文学&quot; class=&quot;headerlink&quot; title=&quot;每天读点文学&quot;&gt;&lt;/a&gt;每天读点文学&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/small/0069ddnsgy1fiof3
    
    </summary>
    
      <category term="文摘" scheme="http://luoing.top/categories/%E6%96%87%E6%91%98/"/>
    
    
      <category term="文摘" scheme="http://luoing.top/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
  <entry>
    <title>Python 技巧总结</title>
    <link href="http://luoing.top/2017/08/17/Python-%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://luoing.top/2017/08/17/Python-技巧总结/</id>
    <published>2017-08-17T06:43:01.000Z</published>
    <updated>2017-08-20T16:16:05.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-枚举-enumerate-可以有参数哦"><a href="#1-枚举-enumerate-可以有参数哦" class="headerlink" title="1.枚举 - enumerate 可以有参数哦"></a>1.枚举 - enumerate 可以有参数哦</h2><p>之前我们这样操作：</p>
<pre><code>i = 0
for item in iterable:
    print i, item
    i += 1
</code></pre><p>现在我们这样操作：</p>
<pre><code>for i, item in enumerate(iterable):
    print i, item
</code></pre><p>enumerate函数还可以接收第二个参数。就像下面这样：</p>
<pre><code>&gt;&gt;&gt;list(enumerate(&apos;abc&apos;)) 

[(0, &apos;a&apos;), (1, &apos;b&apos;), (2, &apos;c&apos;)] 

&gt;&gt;&gt; list(enumerate(&apos;abc&apos;, 1)) 
[(1, &apos;a&apos;), (2, &apos;b&apos;), (3, &apos;c&apos;)]
</code></pre><h2 id="2-字典-集合-解析"><a href="#2-字典-集合-解析" class="headerlink" title="2.字典/集合 解析"></a>2.字典/集合 解析</h2><p>你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子：</p>
<pre><code>my_dict = {i: i * i for i in xrange(100)} 
my_set = {i * 15 for i in xrange(100)}

# There is only a difference of &apos;:&apos; in both

# 两者的区别在于字典推导中有冒号
</code></pre><h2 id="3-强制浮点除法"><a href="#3-强制浮点除法" class="headerlink" title="3.强制浮点除法"></a>3.强制浮点除法</h2><pre><code>from __future__ import division 
result = 1/2
# print(result)
# 0.5
</code></pre><h2 id="4-对Python表达式求值"><a href="#4-对Python表达式求值" class="headerlink" title="4.对Python表达式求值"></a>4.对Python表达式求值</h2><p>我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作：</p>
<pre><code>import ast 
my_list = ast.literal_eval(expr)  
</code></pre><p>来代替以下这种操作：</p>
<pre><code>expr = &quot;[1, 2, 3]&quot;
my_list = eval(expr)
</code></pre><p>我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。</p>
<h2 id="5-字符串-数列-逆序"><a href="#5-字符串-数列-逆序" class="headerlink" title="5.字符串/数列 逆序"></a>5.字符串/数列 逆序</h2><p>你可以用以下方法快速逆序排列数列：</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; a[::-1]
[4, 3, 2, 1]

# This creates a new reversed list. 
# If you want to reverse a list in place you can do:

a.reverse()
</code></pre><p>这总方式也同样适用于字符串的逆序：</p>
<pre><code>&gt;&gt;&gt; foo = &quot;yasoob&quot;
&gt;&gt;&gt; foo[::-1]
&apos;boosay&apos;
</code></pre><h2 id="6-三元运算"><a href="#6-三元运算" class="headerlink" title="6.三元运算"></a>6.三元运算</h2><p>三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。</p>
<pre><code>[on_true] if [expression] else [on_false]
x, y = 50, 25
small = x if x &lt; y else y
</code></pre><h2 id="7-Python里面如何拷贝一个对象"><a href="#7-Python里面如何拷贝一个对象" class="headerlink" title="7.Python里面如何拷贝一个对象"></a>7.Python里面如何拷贝一个对象</h2><p>标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.</p>
<pre><code>import copy
new_list = copy.copy(existing_list)
</code></pre><p>有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:</p>
<pre><code>import copy
new_list_of_dicts = copy.deepcopy(existing_list_of_dicts)
copy(x)
Shallow copy operation on arbitrary Python objects.

deepcopy(x, memo=None, _nil=[])
Deep copy operation on arbitrary Python objects.
</code></pre><h2 id="8-python中如何判断对象相等"><a href="#8-python中如何判断对象相等" class="headerlink" title="8.python中如何判断对象相等"></a>8.python中如何判断对象相等</h2><pre><code>首先是C#中字符串的==和equal方法。
“==” :
对于内置值类型而言， == 判断两个内存值是否相等。
对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。
对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。
“equals” :
对于值类型而言， 内存相等才返回true。
对于引用类型而言，指向同一个引用才算相等。
但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。
python中的 ==
python中的对象包含三要素:id, type, value
id 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。
is 判断是否是一个对象，使用id来判断的。
== 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。
</code></pre><h2 id="9-命名技巧"><a href="#9-命名技巧" class="headerlink" title="9.命名技巧"></a>9.命名技巧</h2><p>今天阅读代码，发现一个不错的函数命名方式:</p>
<pre><code>def request(_argv):  
</code></pre><p>就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。</p>
<h2 id="10-开发者工具集锦"><a href="#10-开发者工具集锦" class="headerlink" title="10.开发者工具集锦"></a>10.开发者工具集锦</h2><ul>
<li>pydoc： 模块可以根据源代码中的docstrings为任何可导入模块生成格式良好的文档。</li>
<li>doctest模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。</li>
<li>unittest模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。</li>
<li>trace：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。</li>
<li>pdb：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。<br>profile, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。</li>
<li>compileall: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。<br>YAPF：Google开源的Python代码格式化工具。</li>
<li>iPDB: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。</li>
<li>pycallgraph: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。</li>
<li>objgraph: objgraph对于查找内存泄露非常有用。</li>
</ul>
<p>  <img src="https://litaotao.github.io/images/pycallgraph.jpg" alt="图标"></p>
<p>转载原文by litaotao <a href="https://litaotao.github.io/python-materials" target="_blank" rel="external">https://litaotao.github.io/python-materials</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-枚举-enumerate-可以有参数哦&quot;&gt;&lt;a href=&quot;#1-枚举-enumerate-可以有参数哦&quot; class=&quot;headerlink&quot; title=&quot;1.枚举 - enumerate 可以有参数哦&quot;&gt;&lt;/a&gt;1.枚举 - enumerate 可以有参
    
    </summary>
    
      <category term="python" scheme="http://luoing.top/categories/python/"/>
    
    
      <category term="python笔记" scheme="http://luoing.top/tags/python%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>每天读点文学1</title>
    <link href="http://luoing.top/2017/08/16/first/"/>
    <id>http://luoing.top/2017/08/16/first/</id>
    <published>2017-08-16T15:12:14.000Z</published>
    <updated>2017-08-21T06:07:47.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天读点文学"><a href="#每天读点文学" class="headerlink" title="每天读点文学"></a>每天读点文学</h2><p><img src="http://wx3.sinaimg.cn/mw690/0069ddnsgy1fiod974sc3j30c80c8gn1.jpg" alt="test">  </p>
<p>不要着急，最好的总会在最不经意的时候出现。那我们要做的就是：怀揣希望去努力，静待美好的出现。————泰戈尔 ​​​​</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天读点文学&quot;&gt;&lt;a href=&quot;#每天读点文学&quot; class=&quot;headerlink&quot; title=&quot;每天读点文学&quot;&gt;&lt;/a&gt;每天读点文学&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/0069ddnsgy1fiod9
    
    </summary>
    
      <category term="文摘" scheme="http://luoing.top/categories/%E6%96%87%E6%91%98/"/>
    
    
      <category term="文摘" scheme="http://luoing.top/tags/%E6%96%87%E6%91%98/"/>
    
  </entry>
  
</feed>
